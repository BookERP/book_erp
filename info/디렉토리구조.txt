## 기본 기능과 구조
- controller

각 컨트롤러는 해당 서비스와 패널(뷰)을 가지고 있으며,
뷰의 이벤트 리스너를 초기화하고 관리합니다.
입력을 받고 view에 model데이터를 뿌려줍니다.

인터페이스를 통해 의존성 주입에 용의하게 했습니다.

model/

class Book{
    private String bookId;
    private String isbn;
    private String author;
    private String publisher; //출판사
    private String publishDate; //출판일
    private double price;
    private String category;
    private String current; // 재고 갯수
}
class Customer{
    private String customerId;
	private String name;
	private String phone;
}

class User {
	private String userId;
	private String account;
	private String pw;
	private String cpw; // 가입시 비밀번호 확인
	private String phone;
}

dao. DB랑 상호작용하여 CRUD 수행.
interface Crud
class BookDAO
class CustomerDAO
class UserDAO


service/ 비즈니스 로직을 담당하며, DAO를 사용하여 데이터를 조작
class BookService
class CustomerService
class UserService



controller/ 각 뷰에 대응. (입력을 받고, Service 메서드를 호출하고, 결과를 뷰에 전달)
class BookController
class CustomerController
class UserController



class CustomerView{책 구매하기와 대여하기 서비스}
class JoinFrame {account,pw,cpw,phone,{master,manager} }
class LoginFrame {로그인button,회워가입button,이름으로 name,pw 찾기 button}
class MyPageView
class MainFrame{menu:관리자 전환,도움말 / tabs:도서 관리,고객 관리, 내 정보.


mvc 패턴으로 할거고, db연동은 ConnectionHelper라고 이미 만들어놓음. 오라클에다가 연결했음.
crud든 controller든 view든  interface를 효율적으로 활용하여 개발.




비밀번호와 비밀번호 확인이 일치하는지 체크
가입 버튼을 누르면 입력받은 정보로 User 객체를 만들고 UserController를 통해 저장을 시도.
가입 성공/실패에 따라 적절한 메시지를 보여주고, 성공하면 close
취소 버튼을 누르면 그냥 close

